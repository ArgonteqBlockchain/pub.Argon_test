{"version":3,"file":"static/js/867.f3a892ec.chunk.js","mappings":"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","sources":["webpack://acadify_saas_frontend/./src/Pages/Auth/Recaptcha/style.module.scss?3efc","webpack://acadify_saas_frontend/./src/Shared/Heading/style.module.scss?1fa1","Shared/Heading/Heading.jsx","Pages/helper/helpers.js","Pages/Auth/Recaptcha/ReCaptcha.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"ContainerClass\":\"style_ContainerClass__n789E\",\"width30\":\"style_width30__EJcxz\",\"SubContainerClass\":\"style_SubContainerClass__G-TzX\",\"RowClass\":\"style_RowClass__OEAlZ\",\"ImageColumnClass\":\"style_ImageColumnClass__T4IWN\",\"formClass\":\"style_formClass__NPSwd\",\"SingleImageClass\":\"style_SingleImageClass__GxqjH\",\"VerifiedButtonClass\":\"style_VerifiedButtonClass__aC58j\",\"IcpToken\":\"style_IcpToken__RXh0k\",\"Verifiedtwo\":\"style_Verifiedtwo__3PVyX\",\"formOne\":\"style_formOne__o-w-f\",\"headingOne\":\"style_headingOne__Pzv8X\",\"buttonone\":\"style_buttonone__4ACil\",\"formcontrol\":\"style_formcontrol__tCYHW\",\"contICP\":\"style_contICP__8TFLJ\",\"contICPTwo\":\"style_contICPTwo__YCjNE\",\"buttonVerify\":\"style_buttonVerify__7laoy\",\"pathimage\":\"style_pathimage__fgpWX\",\"navigation\":\"style_navigation__-6S95\",\"modalbody\":\"style_modalbody__Zj4nI\",\"divcont\":\"style_divcont__dpHnv\",\"imageChecked\":\"style_imageChecked__jiqyC\",\"imageCheckedIcon\":\"style_imageCheckedIcon__CI7GP\",\"imageSelected\":\"style_imageSelected__CRy1q\",\"loading\":\"style_loading__fnZAV\",\"error\":\"style_error__0UP+S\"};","// extracted by mini-css-extract-plugin\nexport default {\"mainHeading\":\"style_mainHeading__haM0q\",\"pageHeading\":\"style_pageHeading__mH+8y\",\"subHeadingSize\":\"style_subHeadingSize__NbF4T\",\"mainHeadingOne\":\"style_mainHeadingOne__tepMU\",\"mainHeadingTwo\":\"style_mainHeadingTwo__1DO5e\",\"gotchaheading\":\"style_gotchaheading__uwWkt\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\nimport styles from \"./style.module.scss\";\r\n\r\nexport default function Subheading(props) {\r\n  const { className, children, mainHeading, pageHeading, subHeadingSize,mainHeadingOne,mainHeadingTwo } = props;\r\n  const styleClass = classNames(className, {\r\n    [styles.pageHeading]: pageHeading,\r\n    [styles.subHeadingSize]: subHeadingSize,\r\n    [styles.mainHeading]: mainHeading,\r\n    [styles.mainHeadingOne]: mainHeadingOne,\r\n    [styles.mainHeadingTwo]: mainHeadingTwo,\r\n\r\n  });\r\n  return (\r\n    <h2 className={styleClass}>\r\n      <span>{children}</span>\r\n    </h2>\r\n  );\r\n};\r\n\r\nSubheading.propTypes = {\r\n  className: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n  mainHeading: PropTypes.bool,\r\n  mainHeadingOne:PropTypes.bool,\r\n  mainHeadingTwo:PropTypes.bool,\r\n  pageHeading: PropTypes.bool,\r\n  subHeadingSize: PropTypes.bool,\r\n};\r\nSubheading.defaultProps = {\r\n  className: \"\",\r\n  mainHeading: false,\r\n  pageHeading: false,\r\n  subHeadingSize: false,\r\n};\r\n","export const shuffleArray = (array) => {\r\n    let randomIndex;\r\n    let currentIndex = array.length;\r\n\r\n    // While there remain elements to shuffle.\r\n    while (currentIndex !== 0) {\r\n      // Pick a remaining element.\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n\r\n      // And swap it with the current element.\r\n      [array[currentIndex], array[randomIndex]] = [\r\n        array[randomIndex],\r\n        array[currentIndex],\r\n      ];\r\n    }\r\n    return array;\r\n  };","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport styles from \"./style.module.scss\";\r\nimport { BsCheckLg } from \"react-icons/bs\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Heading from \"../../../Shared/Heading/Heading\";\r\nimport { shuffleArray } from \"../../helper/helpers\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nexport default function ReCaptcha() {\r\n  const [text, setText] = useState(\"\");\r\n  const [data, setData] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [singleData, setSingleData] = useState();\r\n  const [imagesData, setImagesData] = useState([]);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [verifyError, setVerifyError] = useState(\"\");\r\n  const [loading, setLoading] = useState({ fetch: false, verify: false });\r\n  const [captchaInfo, setCaptchaInfo] = useState({\r\n    sessionId: \"\",\r\n    category: null,\r\n    categoryName: \"\",\r\n  });\r\n\r\n  let showUrl =\r\n    \"https://crazy-baths-roll-182-185-205-247.loca.lt/api/v1/captcha/show\";\r\n  let verifyUrl =\r\n    \"https://crazy-baths-roll-182-185-205-247.loca.lt/api/v1/captcha/verify\";\r\n\r\n  const getCaptcha = () => {\r\n    setLoading({ ...loading, fetch: true });\r\n    resetStates();\r\n    axios\r\n      .get(showUrl)\r\n      .then((res) => {\r\n        console.log({ res });\r\n        setImagesData(res?.data?.data?.DATA);\r\n        setCaptchaInfo({\r\n          category: res?.data?.data?.category,\r\n          sessionId: res?.data?.data?.sessionId,\r\n          categoryName: res?.data?.data?.categoryName,\r\n        });\r\n\r\n        if (res?.data?.data?.DATA?.length !== undefined) {\r\n          let resData = res.data.data.DATA.map((item) => {\r\n            return { ...item, ischecked: 0 };\r\n          });\r\n          let shuffledArray = shuffleArray(resData);\r\n          setData(shuffledArray);\r\n        } else {\r\n          setSingleData({ ...res?.data?.data?.DATA });\r\n        }\r\n        setLoading({ fetch: false, verify: false });\r\n      })\r\n      .catch((error) => {\r\n        setLoading({ fetch: false, verify: false });\r\n        console.log(error);\r\n        setSubmitted(false);\r\n        setErrorMessage(error?.message);\r\n      });\r\n  };\r\n\r\n  const verifyCaptcha = () => {\r\n    let apiData = [];\r\n    let obj2;\r\n    if (imagesData instanceof Array) {\r\n      imagesData.forEach((item) => {\r\n        const obj = {\r\n          id: item.id,\r\n          answer: item.answer,\r\n          category: item.category,\r\n          ischecked: item.ischecked,\r\n        };\r\n        apiData.push(obj);\r\n      });\r\n    } else {\r\n      obj2 = [\r\n        {\r\n          id: imagesData.id,\r\n          answer: text,\r\n          category: imagesData.category,\r\n        },\r\n      ];\r\n    }\r\n\r\n    axios\r\n      .post(verifyUrl, {\r\n        answer: apiData?.length > 0 ? apiData : obj2,\r\n        category: captchaInfo.category,\r\n        sessionId: captchaInfo.sessionId,\r\n      })\r\n      .then((res) => {\r\n        setText(\"\");\r\n        setMessage(res.data.data.data);\r\n        if (res.data.data.data === \"unverified\") {\r\n          getCaptcha();\r\n          toast.error(\"UnVerified\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        toast.error(\"Network Error\");\r\n        setLoading({ fetch: false, verify: false });\r\n        setSubmitted(false);\r\n        setVerifyError(error.message);\r\n      });\r\n  };\r\n\r\n  const handleImageSelect = (item, index) => {\r\n    let itemData = { ...item };\r\n    let items = [...data];\r\n    if (itemData.ischecked === 1) {\r\n      itemData.ischecked = 0;\r\n    } else {\r\n      itemData.ischecked = 1;\r\n    }\r\n    items[index] = itemData;\r\n    setData([...items]);\r\n    setImagesData([...items]);\r\n  };\r\n\r\n  const resetStates = () => {\r\n    setData([]);\r\n    setText(\"\");\r\n    setMessage(\"\");\r\n    setImagesData([]);\r\n    setSingleData([]);\r\n    setVerifyError(\"\");\r\n    setErrorMessage(\"\");\r\n    setCaptchaInfo({ categoryName: \"\", sessionId: \"\", category: null });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Container className=\"w-100\">\r\n        <Row className={styles.gotchaheading}>\r\n          <Col>\r\n            <Heading mainHeading>GotcHA faucet {message?.data?.data}</Heading>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      <Heading mainHeading>\r\n        {message?.data?.data ? message?.data?.data : \"\"}\r\n      </Heading>\r\n\r\n      <Container className={`col-lg-6 ${styles.width30}`}>\r\n        <Container className={styles.contICP}>\r\n          <Container className={styles.contICPTwo}>\r\n            <Row>\r\n              <Col>\r\n                <Heading mainHeadingOne>ICP Test Tokens</Heading>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Heading mainHeadingTwo>Wallet Address</Heading>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Form className=\"w-100 rounded-top\">\r\n                  <Form.Group className=\"mb-3\">\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      value={text}\r\n                      onChange={(e) => setText(e.target.value)}\r\n                    />\r\n                  </Form.Group>\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                {errorMessage ? (\r\n                  <Row>\r\n                    <Col>\r\n                      <div className={styles.error}>\r\n                        Error Fetching Captcha. Please Try Again\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                ) : null}\r\n                {verifyError ? (\r\n                  <Row>\r\n                    <Col>\r\n                      <div className={styles.error}>\r\n                        Error Verifying Captcha. Please Try Again\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                ) : null}\r\n                {submitted ? (\r\n                  <Container className=\"w-100 mt-2\">\r\n                    <Container className={styles.SubContainerClass}>\r\n                      <Row className={styles.RowClass}>\r\n                        <Col>\r\n                          {message !== \"verified\" ? (\r\n                            <Heading mainHeading>\r\n                              Select All {captchaInfo.categoryName}\r\n                            </Heading>\r\n                          ) : null}\r\n                        </Col>\r\n                      </Row>\r\n                    </Container>\r\n                    <Container>\r\n                      {loading.fetch ? (\r\n                        <div className={styles.loading}>\r\n                          Fetching Captcha...\r\n                        </div>\r\n                      ) : message === \"verified\" ? (\r\n                        <Heading mainHeading>Complete</Heading>\r\n                      ) : data?.length > 0 ? (\r\n                        <>\r\n                          {message === \"unverified\" ? (\r\n                            <Heading mainHeading>UnVerified</Heading>\r\n                          ) : null}\r\n                          <Row className=\"d-flex justify-content-center\">\r\n                            {data.map((item, index) => {\r\n                              return (\r\n                                <Col\r\n                                  sm=\"4\"\r\n                                  md=\"4\"\r\n                                  lg=\"4\"\r\n                                  xl=\"4\"\r\n                                  key={index}\r\n                                  className={styles.ImageColumnClass}\r\n                                >\r\n                                  <img\r\n                                    src={item.path}\r\n                                    alt=\"loading\"\r\n                                    className={`${\r\n                                      item.ischecked === 1\r\n                                        ? styles.imageChecked\r\n                                        : \"\"\r\n                                    }`}\r\n                                    onClick={() =>\r\n                                      handleImageSelect(item, index)\r\n                                    }\r\n                                  />\r\n                                  <span\r\n                                    className={`${styles.imageCheckedIcon} ${\r\n                                      item.ischecked === 0\r\n                                        ? styles.imageSelected\r\n                                        : null\r\n                                    }`}\r\n                                    onClick={() =>\r\n                                      handleImageSelect(item, index)\r\n                                    }\r\n                                  >\r\n                                    <BsCheckLg color=\"green\" size=\"25\" />\r\n                                  </span>\r\n                                </Col>\r\n                              );\r\n                            })}\r\n                          </Row>\r\n                        </>\r\n                      ) : singleData?.path ? (\r\n                        <>\r\n                          {message === \"unverified\" ? (\r\n                            <Heading mainHeading>UnVerified</Heading>\r\n                          ) : null}\r\n                          <Row>\r\n                            <Col>\r\n                              <Form>\r\n                                <div className={styles.SingleImageClass}>\r\n                                  <img src={singleData?.path} alt=\"loading\" />\r\n                                </div>\r\n                              </Form>\r\n                            </Col>\r\n                          </Row>\r\n                        </>\r\n                      ) : null}\r\n                    </Container>\r\n                  </Container>\r\n                ) : null}\r\n                <Container className=\"mt-3\">\r\n                  <Row>\r\n                    <Col>\r\n                      {message !== \"verified\" ? (\r\n                        !submitted ? (\r\n                          <Button\r\n                            className={styles.buttonVerify}\r\n                            onClick={() => {\r\n                              getCaptcha();\r\n                              setSubmitted(!submitted);\r\n                            }}\r\n                          >\r\n                            Submit\r\n                          </Button>\r\n                        ) : !loading.fetch ? (\r\n                          <Button\r\n                            className={styles.buttonVerify}\r\n                            onClick={verifyCaptcha}\r\n                          >\r\n                            Verify\r\n                          </Button>\r\n                        ) : null\r\n                      ) : null}\r\n                    </Col>\r\n                  </Row>\r\n                </Container>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Container>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["Subheading","props","className","children","mainHeading","pageHeading","subHeadingSize","mainHeadingOne","mainHeadingTwo","styleClass","classNames","styles","defaultProps","ReCaptcha","useState","text","setText","data","setData","message","setMessage","singleData","setSingleData","imagesData","setImagesData","submitted","setSubmitted","errorMessage","setErrorMessage","verifyError","setVerifyError","fetch","verify","loading","setLoading","sessionId","category","categoryName","captchaInfo","setCaptchaInfo","getCaptcha","resetStates","axios","then","res","console","log","DATA","undefined","length","shuffledArray","array","randomIndex","currentIndex","Math","floor","random","shuffleArray","map","item","ischecked","catch","error","handleImageSelect","index","itemData","items","Container","Row","Col","Form","type","value","onChange","e","target","sm","md","lg","xl","src","path","alt","onClick","color","size","Button","obj2","apiData","Array","forEach","obj","id","answer","push","toast"],"sourceRoot":""}